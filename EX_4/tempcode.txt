// void* thread_B(void* arg) {
//    ThreadData *params = (ThreadData *) arg;
//    long totalCharCount = 0;

//    memset(params->count, 0, sizeof(params->count));

//    // char *words[NUMBER_OF_EXTRA_WORDS] = {"and", "at", "it", "my", "Hamlet"};
//    // int word_count[NUMBER_OF_EXTRA_WORDS] = {0};

//    while (1) {
//       pthread_mutex_lock(&params->mutex);

//       while (params->bytes_in_buffer == 0)
//          pthread_cond_wait(&params->cond_full, &params->mutex);
//       pthread_mutex_unlock(&params->mutex);

//       for (int i = 0; i < params->bytes_in_buffer; i++) {
//          totalCharCount++;
//          char c = params->buffer[i];

//          // Count only printable ASCII characters
//          if (c >= 32 && c <= 126) 
//             params->count[c - 32]++;
//       }

//       // char *token = strtok(params->buffer, " ");

//       // while(token != NULL) {

//       //    printf("Token: %s\r\n", token);

//       //    for (int i = 0; i < NUMBER_OF_EXTRA_WORDS; i++) {
//       //       if (strcmp(token, words[i]) == 0) {
//       //          word_count[i]++;
//       //       }
//       //    }

//       //    token = strtok(NULL, " ");
//       // }

//       printf("TOTAL CHARS: %lu\r\n", totalCharCount);

//       params->bytes_in_buffer = 0;
//       pthread_cond_signal(&params->cond_empty);
//       pthread_mutex_unlock(&params->mutex);

//       if (params->bytes_in_buffer == 0)
//          break;
//    }


//    for (int i = 0; i < BYTE_RANGE; i++) {
//       char c = (char) (i + 32);
//       printf("'%c': %d\n", c, params->count[i]);
//    }

//    // for (int j = 0; j < NUMBER_OF_EXTRA_WORDS; j++) {
//    //    printf("%s: %d\n", words[j], word_count[j]);
//    // }

//    pthread_exit(NULL);
// }
